Projeto monolitico - Estruturação do projeto:

1 - Criando Pasta do Projeto:
- Abrir terminal e criar a seguinte pasta
    - mkdir Fina.Balta.io

2 - Criar a Solution(sln):
- Entrar na pasta criada e criar a solução com o seguinte comando:
    - dotnet new sln

3 - Criar a Camada API:
- No mesmo diretorio, crie a camada API com o comando abaixo:
    - dotnet new web -o Fina.api -f net8.0

4 - Criar a Camada Web:
- No mesmo diretorio, cria a camada WEB com o comando abaixo:
    - OPÇÂO COM BLAZOR o front-end(Substitui o javascript e utiliza C# no front-end).
        - dotnet new blazorwasm -o Fina.Web --pwa -f net8.0
    
    OU
    
    - OPÇÂO Web Mvc Padrão.
        - dotnet new mvc -o Fina.Web -f net8.0

5 - Criar a camada Core:
- No mesmo diretorio, crie a camada core usando o seguinte comando:
    - dotnet new classlib -o Fina.Core -f net8.0

6 - Relacione os projetos criado a solution:
    - dotnet sln add Fina.api/
    - dotnet sln add Fina.Web/
    - dotnet sln add Fina.Core/

7 - Adicione as referencias dos projetos:
OBS: O projeto Core, não referencia ninguem, nã sabe da existencias dos outros projetos.
     Já os demais precisam referenciar o projeto Core.

    Adicionando as referencias:
    Projeto Fina.api - Acesse a pasta desse projeto e adicione a referencia ao projeto Core:
        - cd Fina.api
        - dotnet add reference ../Fina.Core

    Projeto Fina.Web - Acesse a pasta desse projeto e adicione a referencia ao projeto Core:
        - cd Fina.Web
        - dotnet add reference ../Fina.Core

8 - Por fim, dar um build no projeto para ver se tem algum erro:
    - dotnet build


### CAMADA CORE  ###
Iniciar codando a parte da camada core, ciando os Models, Enums, Handlers/interfaces, Classes Requests e Responses


### CAMADA API ###
Posteriormente  codar a camada API.
- Adicione os pacotes para incluir acesso ao banco de dados, nesse caso, utilizaremos Entity Framerwork Core com banco de dados Mysql:
    - dotnet add package Microsoft.EntityFrameworkCore.Design;
    - dotnet add package MySql.EntityFrameworkCore

- Criar dentro do projeto API a pasta DATA.
    - Dentro da pasta data, criar uma pasta chamada Mappings, no qual deverá conter as classes que estão na pasta Models da camada Core.
    - Por exemplo: Se na camada Core na pasta Models tem a classe Category, na pasta Mappings deveremos criar a classe CategoryMappings 
      para definir o nome da tabela do banco de dados, tipos de colunas, quantidade de caractres dentre outras regras de banco de dados.

- Criar dentro da pasta Data, a classe DbContext para herdar as configurações de mapeamentos do EntityFrameworkCore.
    - Configurar nessa classe o contrutor, as propriedades DbSet e metodo onModelCreating.

    EX:
        public class AppDbContext : DbContext
    {
        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options)
        {
            
        }

        public DbSet<Category> Categories { get; set; } = null!;
        public DbSet<Transaction> Transactions { get; set; } = null!;

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetCallingAssembly());
        }
    }

- Na classe program.cs, configurar a connections string e injeção de dependencia do DbContext com o Mysql:
    Ex:

    const string connectionString = "Server=localhost;Database=fina;User=root;Password=angcessil;";

    builder.Services.AddDbContext<AppDbContext>(
        options => options.UseMySQL(connectionString));

- Criar as Migrations:
    Dentro do projeto de camada API, rodar o seguinte comando para criar a migration:
    - dotnet ef migrations add InitialMigrationsFinaDatabase
    - dotnet ef database update

- Criar a pasta Handlers na camada de Api, para realizar as implementações das interfaces criadas na pasta Handlers da camada Core:
    - Criar pasta Handlers;

- Criar pasta Common/ -> Api/ e dentro da pasta Api, criar uma interface IEndpoint que irá conter o contrato:
    - static abstract void Map(IEndpointRouteBuilder builder);

- Criar a pasta Endpoints, e dentro da mesma as pastas dos endpoints(Ex: Categories, Products) na camada Api para centralizar as chamadas aos endpoints,
  no qual cada classe criada nessas pastas herdará de IEndpoint.


- Adicionando na camada api suporte ao Swagger/Documentação da Api
    - Adicionar os seguintes pacotes:
        dotnet add package Microsoft.AspNetCore.OpenApi
        dotnet add package SwashBuckle.AspNetCore